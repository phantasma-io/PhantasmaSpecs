<pre>
  PEPE: 1
  Title: PEPE Purpose and Guidelines
  Author: SÃ©rgio Flores <sergio@phantasma.io>
  Type: Meta
  Status: Active
  Created: 2018-8-3
</pre>

==What is a PEPE?==

PEPE stands for Phantasma Ecosystem Protocol Extension. An PEPE is a design document providing information to the Phantasma community, or describing a new feature for Phantasma or its processes or environment. The PEPE should provide a concise technical specification of the feature and a rationale for the feature. The PEPE author is responsible for building consensus within the community and documenting dissenting opinions.

==PEPE Rational==

We intend PEPEs to be the primary mechanisms for proposing new features, for collecting community input on an issue, and for documenting the design decisions that have gone into Phantasma. Because the PEPEs are maintained as text files in a versioned repository, their revision history is the historical record of the feature proposal.

For Phantasma implementers, PEPEs are a convenient way to track the progress of their implementation. Ideally each implementation maintainer would list the PEPEs that they have implemented. This will give end users a convenient way to know the current status of a given implementation or library.

==PEPE Types==

There are three types of PEPE:

*A '''Standards Track''' PEPE describes any change that affects most or all Phantasma implementations, such as a change to the network protocol, a change in block or transaction validity rules, proposed application standards/conventions, or any change or addition that affects the interoperability of applications using Phantasma.

*An '''Informational''' PEPE describes a Phantasma design issue, or provides general guidelines or information to the Phantasma community, but does not propose a new feature. Informational PEPEs do not necessarily represent a Phantasma community consensus or recommendation, so users and implementors are free to ignore Informational PEPEs or follow their advice.

*A '''Meta''' PEPE describes a process surrounding Phantasma or proposes a change to (or an event in) a process. Meta PEPEs are like Standards Track PEPEs but apply to areas other than the Phantasma protocol itself. They may propose an implementation, but not to Phantasma's codebase; they often require community consensus; unlike Informational PEPEs, they are more than recommendations, and users are typically not free to ignore them. Examples include procedures, guidelines, changes to the decision-making process, and changes to the tools or environment used in Phantasma development.

==PEPE Work Flow==

The PEPE process begins with a new idea for Phantasma. It is highly recommended that a single PEPE contain a single key proposal or new idea. The more focused the PEPE, the more successful it tends to be. A change to one client doesn't require a PEPE; a change that affects multiple clients, or defines a standard for multiple apps to use, does. The PEPE editor reserves the right to reject PEPE proposals if they appear too unfocused or too broad. If in doubt, split your PEPE into several well-focused ones.

Each PEPE must have a champion - someone who writes the PEPE using the style and format described below, shepherds the discussions in the appropriate forums, and attempts to build community consensus around the idea.

Vetting an idea publicly before going as far as writing an PEPE is meant to save the potential author time. Asking the Phantasma community first if an idea is original helps prevent too much time being spent on something that is guaranteed to be rejected based on prior discussions (searching the Internet does not always do the trick). It also helps to make sure the idea is applicable to the entire community and not just the author. Just because an idea sounds good to the author does not mean it will work for most people in most areas where Phantasma is used. Examples of appropriate public forums to gauge interest around your PEPE include [https://www.reddit.com/r/Phantasma the Phantasma subreddit], [https://github.com/Phantasma-project/proposals/issues the Issues section of this repository], and [http://slack.Phantasma.org one of the Phantasma Slack channels]. In particular, [https://github.com/Phantasma-project/proposals/issues the Issues section of this repository] is an excellent place to discuss your proposal with the community and start creating more formalized language around your PEPE.

Once the champion has asked the Phantasma community whether an idea has any chance of acceptance a draft PEPE should be presented as a pull request. This gives the author a chance to continuously edit the draft PEPE for proper formatting and quality. This also allows for further public comment and the author of the PEPE to address concerns about the proposal.

If the PEPE collaborators approve, the PEPE editor will assign the PEPE a number, label it as Standards Track, Informational, or Meta, give it status "Draft", and add it to the git repository. The PEPE editor will not unreasonably deny an PEPE. Reasons for denying PEPE status include duplication of effort, being technically unsound, not providing proper motivation or addressing backwards compatibility, or not in keeping with the Phantasma philosophy.

Standards Track PEPEs consist of three parts, a design document, implementation, and finally if warranted an update to the formal specification. The PEPE should be reviewed and accepted before an implementation is begun, unless an implementation will aid people in studying the PEPE. Standards Track PEPEs must include an implementation -- in the form of code, a patch, or a URL to same -- before it can be considered Final.

For an PEPE to be accepted it must meet certain minimum criteria. It must be a clear and complete description of the proposed enhancement. The enhancement must represent a net improvement. The proposed implementation, if applicable, must be solid and must not complicate the protocol unduly.

Once a PEPE has been accepted, the implementations must be completed. When the implementation is complete and accepted by the community, the status will be changed to "Final".

A PEPE can also be assigned status "Deferred". The PEPE author or editor can assign the PEPE this status when no progress is being made on the PEPE. Once a PEPE is deferred, the PEPE editor can re-assign it to draft status.

A PEPE can also be "Rejected". Perhaps after all is said and done it was not a good idea. It is still important to have a record of this fact.

PEPEs can also be superseded by a different PEPE, rendering the original obsolete.

The possible paths of the status of PEPEs are as follows:

[[Image:PEPE-1/process.png|PEPE Process]]

Some Informational and Meta PEPEs may also have a status of "Active" if they are never meant to be completed. E.g. PEPE 1 (this PEPE).

==What belongs in a successful PEPE?==

Each PEPE should have the following parts:

*Preamble -- [https://tools.ietf.org/html/rfc822 RFC 822] style headers containing meta-data about the PEPE, including the PEPE number, a short descriptive title (limited to a maximum of 44 characters), the names, and optionally the contact info for each author, etc.

*Abstract -- a short (~200 words) description of the technical issue being addressed.

*Motivation (*optional) -- The motivation is critical for PEPEs that want to change the Phantasma protocol. It should clearly explain why the existing protocol specification is inadequate to address the problem that the PEPE solves. PEPE submissions without sufficient motivation may be rejected outright.

*Specification -- The technical specification should describe the syntax and semantics of any new feature. The specification should be detailed enough to allow competing, interoperable implementations for any of the current Phantasma platforms.

*Rationale -- The rationale fleshes out the specification by describing what motivated the design and why particular design decisions were made. It should describe alternate designs that were considered and related work, e.g. how the feature is supported in other languages. The rationale may also provide evidence of consensus within the community, and should discuss important objections or concerns raised during discussion.

*Backwards Compatibility -- All PEPEs that introduce backwards incompatibilities must include a section describing these incompatibilities and their severity. The PEPE must explain how the author proposes to deal with these incompatibilities. PEPE submissions without a sufficient backwards compatibility treatise may be rejected outright.

*Test Cases -- Test cases for an implementation are mandatory for PEPEs that are affecting consensus changes. Other PEPEs can choose to include links to test cases if applicable.

*Implementations -- The implementations must be completed before any PEPE is given status "Final", but it need not be completed before the PEPE is accepted. It is better to finish the specification and rationale first and reach consensus on it before writing code.

==PEPE Formats and Templates==

PEPEs should be written in [https://www.mediawiki.org/wiki/Help:Contents mediawiki] or [https://help.github.com/articles/basic-writing-and-formatting-syntax/ markdown] format. Image files should be included in a subdirectory for that PEPE.

===PEPE Header Preamble===

Each PEPE must begin with an [https://tools.ietf.org/html/rfc822 RFC 822] style header preamble. The headers must appear in the following order. Headers marked with "*" are optional and are described below. All other headers are required.

<pre>
  PEPE: <PEPE number>(this is determined by the PEPE editor)
  Title: <PEPE title>
  Author: <list of authors' real names and optionally, email address>
 *Discussions-To: <email address>
  Status: <Draft | Active | Accepted | Deferred | Rejected | Withdrawn | Final | Superseded>
  Type: <Standard | Informational | Meta>
  Created: <date created on, in ISO 8601 (yyyy-mm-dd) format>
 *Replaces: <PEPE numbers>
 *Superseded-By: <PEPE number>
 *Resolution: <url>
</pre>

The Author header lists the names, and optionally the email addresses of all the authors/owners of the PEPE. The format of the Author header value must be

<pre>
  Random J. User <address@dom.ain>
</pre>

if the email address is included, and just

<pre>
  Random J. User
</pre>

if the email address is not given.

If there are multiple authors, each should be on a separate line following RFC 2822 continuation line conventions.

Note: The Resolution header is required for Standards Track PEPEs only. It contains a URL that should point to an email message or other web resource where the pronouncement about the PEPE is made.

While a PEPE is in private discussions (usually during the initial Draft phase), a Discussions-To header will indicate the mailing list or URL where the PEPE is being discussed. No Discussions-To header is necessary if the PEPE is being discussed privately with the author.

The Type header specifies the type of PEPE: Standard, Informational, or Meta.

The Created header records the date that the PEPE was assigned a number. It should be in yyyy-mm-dd format, e.g. 2001-08-14.

PEPEs may have a Requires header, indicating the PEPE numbers that this PEPE depends on.

PEPEs may also have a Superseded-By header indicating that a PEPE has been rendered obsolete by a later document; the value is the number of the PEPE that replaces the current document. The newer PEPE must have a Replaces header containing the number of the PEPE that it rendered obsolete.

===Auxiliary Files===

PEPEs may include auxiliary files such as diagrams. Such files must be included in a subdirectory for that PEPE and be named PEPE-x-y.ext, where "x" is the PEPE number, "y" is a serial number (starting at 1), and "ext" is replaced by the actual file extension (e.g. "png").

==Transferring PEPE Ownership==

It occasionally becomes necessary to transfer ownership of PEPEs to a new champion. In general, we'd like to retain the original author as a co-author of the transferred PEPE, but that's really up to the original author. A good reason to transfer ownership is because the original author no longer has the time or interest in updating it or following through with the PEPE process, or has fallen off the face of the 'net (i.e. is unreachable or not responding to email). A bad reason to transfer ownership is because you don't agree with the direction of the PEPE. We try to build consensus around a PEPE, but if that's not possible, you can always submit a competing PEPE.

If you are interested in assuming ownership of a PEPE, send a message asking to take over, addressed to both the original author and the PEPE editor. If the original author doesn't respond to email in a timely manner, the PEPE editor will make a unilateral decision (it's not like such decisions can't be reversed :).

==PEPE Editors==

The current PEPE editor is

*SÃ©rgio Flores (@relfos)

==PEPE Editor Responsibilities & Workflow==

For each new PEPE that comes in, an editor does the following:

*Read the PEPE to check if it is ready: sound and complete. The ideas must make technical sense, even if they don't seem likely to be accepted.

*The title should accurately describe the content.

*Edit the PEPE for language (spelling, grammar, sentence structure, etc.), markup (Github flavored Markdown), code style

If the PEPE isn't ready, the editor will send it back to the author for revision, with specific instructions.

Once the PEPE is ready for the repository, the PEPE editor will:

*Assign a PEPE number (almost always just the next available number, but sometimes it's a special/joke number, like 666 or 3141) in the pull request comments.

*Merge the pull request when the author is ready (allowing some time for further peer review).

*List the PEPE in [[README.mediawiki]]

*Send a message back to the PEPE author with next steps.

The PEPE editors are intended to fulfill administrative and editorial responsibilities. The PEPE editors monitor PEPE changes, and correct any structure, grammar, spelling, or markup mistakes we see.

==History==

This document was derived heavily from [https://github.com/bitcoin/bips/blob/master/bip-0001.mediawiki Bitcoin's BIP-0001] written by Amir Taaki which in turn was derived from [https://www.python.org/dev/PEPEs/PEPE-0001/ Python's PEPE-0001]. In many places text was simply copied and modified. Although the PEPE-0001 text was written by Barry Warsaw, Jeremy Hylton, and David Goodger, they are not responsible for its use in the Phantasma improvement process, and should not be bothered with technical questions specific to Phantasma or the PEPE process. Please direct all comments to the PEPE editors.
